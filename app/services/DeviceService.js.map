{"version":3,"sources":["../app/services/DeviceService.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;YAUA;gBAII,YAAoB,IAAU;oBAAV,SAAI,GAAJ,IAAI,CAAM;oBAFtB,eAAU,GAAa,EAAE,CAAC;oBAG9B,IAAI,CAAC,WAAW,EAAE,CAAC;gBACvB,CAAC;gBAED,UAAU;oBACN,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC;gBAC3B,CAAC;gBAED,WAAW;oBACP,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,yBAAyB,CAAC;yBACnC,SAAS,CACN,IAAI;wBACA,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC;oBACzC,CAAC,EACD,GAAG;wBACC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAA;oBACpB,CAAC,EACD,MAAM,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAC5B,CAAA;gBACT,CAAC;gBACD,QAAQ,CAAC,CAAC;oBACN,IAAI,KAAK,CAAC;oBAEV,MAAM,CAAA,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;wBACnB,KAAK,4BAAa,CAAC,4BAAa,CAAC,KAAK,CAAC;4BACnC,KAAK,GAAG,4BAAa,CAAC,KAAK,CAAC;4BAC5B,KAAK,CAAC;wBACV,KAAK,4BAAa,CAAC,4BAAa,CAAC,OAAO,CAAC;4BACrC,KAAK,GAAG,4BAAa,CAAC,OAAO,CAAC;4BAC9B,KAAK,CAAC;oBACd,CAAC;oBAED,MAAM,CAAC,KAAK,CAAC;gBACjB,CAAC;gBAED,OAAO,CAAC,CAAC;oBACL,IAAI,IAAI,CAAC;oBAET,MAAM,CAAA,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;wBAClB,KAAK,yBAAW,CAAC,yBAAW,CAAC,KAAK,CAAC;4BAC/B,IAAI,GAAG,yBAAW,CAAC,KAAK,CAAC;4BACzB,KAAK,CAAC;wBACV,KAAK,yBAAW,CAAC,yBAAW,CAAC,MAAM,CAAC;4BAChC,IAAI,GAAG,yBAAW,CAAC,MAAM,CAAC;4BAC1B,KAAK,CAAC;wBACV,KAAK,yBAAW,CAAC,yBAAW,CAAC,MAAM,CAAC;4BAChC,IAAI,GAAG,yBAAW,CAAC,MAAM,CAAC;4BAC1B,KAAK,CAAC;oBACd,CAAC;oBAED,MAAM,CAAC,IAAI,CAAC;gBAChB,CAAC;gBAED,kBAAkB,CAAC,IAAc;oBAC7B,IAAI,CAAC,OAAO,CAAC,CAAC;wBACV,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI;4BAChB,IAAI,SAAS,GAAU,IAAI,CAAC;4BAC5B,OAAM,SAAS,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAC,CAAC;gCACjC,SAAS,GAAG,SAAS,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;4BAC3C,CAAC;4BACD,IAAI,CAAC,UAAU,CAAC,IAAI,CAChB,IAAI,eAAM,CACN,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,EACf,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,EAChB,IAAI,EACJ,CAAC,CAAC,CAAC,WAAW,GAAG,GAAG,GAAE,SAAS,GAAE,MAAM,CAAC,EACxC,IAAI,EACJ,IAAI,EACJ,IAAI,CACP,CACJ,CAAA;wBACL,CAAC,CACJ,CAAA;oBAED,CAAC,CAAC,CAAA;gBACN,CAAC;YACL,CAAC;YAjFD;gBAAC,iBAAU,EAAE;6BAAA;YACb,yCAgFC,CAAA","file":"services/DeviceService.js","sourcesContent":["/**\n * Created by Mtui on 9/19/16.\n */\nimport { Http } from \"@angular/http\";\nimport {Injectable} from \"@angular/core\";\nimport {DeviceTypes} from \"../model/DeviceTypes\";\nimport {DevicesModels} from \"../model/DeviceModels\";\nimport {Device} from \"../model/Device\";\n\n@Injectable()\nexport class DeviceService {\n\n    private deviceData: Device[] = [];\n\n    constructor(private http: Http) {\n        this.loadDevices();\n    }\n\n    getDevices() {\n        return this.deviceData;\n    }\n\n    loadDevices() {\n        this.http.get(\"/resource/resource.json\")\n            .subscribe(\n                data => {\n                    this.populateDeviceData(data.json());\n                },\n                err => {\n                    console.log(err)\n                },\n                () => console.log(\"done\")\n            )\n    }\n    getModel(d) {\n        var model;\n\n        switch(d.deviceModel) {\n            case DevicesModels[DevicesModels.Apple]:\n                model = DevicesModels.Apple;\n                break;\n            case DevicesModels[DevicesModels.Samsung]:\n                model = DevicesModels.Samsung;\n                break;\n        }\n\n        return model;\n    }\n\n    getType(d) {\n        var type;\n\n        switch(d.deviceType) {\n            case DeviceTypes[DeviceTypes.Phone]:\n                type = DeviceTypes.Phone;\n                break;\n            case DeviceTypes[DeviceTypes.Tablet]:\n                type = DeviceTypes.Tablet;\n                break;\n            case DeviceTypes[DeviceTypes.Laptop]:\n                type = DeviceTypes.Laptop;\n                break;\n        }\n\n        return type;\n    }\n\n    populateDeviceData(data: Device[]) {\n        data.forEach(d => {\n            d.names.forEach(name => {\n                var imageName:string = name;\n                while(imageName.indexOf(\" \") !== -1){\n                    imageName = imageName.replace(\" \", \"\");\n                }\n                this.deviceData.push(\n                    new Device(\n                        this.getType(d),\n                        this.getModel(d),\n                        null,\n                        (d.resourceUrl + \"/\"+ imageName +\".jpg\"),\n                        null,\n                        name,\n                        null\n                    )\n                )\n            }\n        )\n\n        })\n    }\n}"],"sourceRoot":"/source/"}