if ((typeof WebCube) === 'undefined') {
  WebCube = {};
}

WebCube.settings = {};
WebCube.modules = {};

/* Globals */
var loadingTimer = 0,
    loadingInt;

WebCube.extend = function(name, object) {
/* Extends WebCube functionality, access all through WebCube object. 
 * ex. WebCube.project.method() 
 */

    this.name = name;
    this[name] = object;
};

WebCube.onReady = function(options) {
/* To be called in $(document).ready() */

    this.settings = options;
    this.placeholderText();
//    this.formErrorHandling();
    if (this.settings.IS_MOBILE == 'False') {
        this.adjustContainer('#wrap, #footer');
        $(window).resize(function() { WebCube.adjustContainer('#wrap, #footer');});
    }
    if (this.settings.IE_DEBUG  == 'True') {
        if ($('html').hasClass('ie6')){ $('body').addClass('ie6'); }
        if ($('html').hasClass('ie7')){ $('body').addClass('ie7'); }
        if ($('html').hasClass('ie8')){ $('body').addClass('ie8'); }
    }

    this.initCTAs();
    this.formValidation();
};

WebCube.log = function(message) {
/* console.log() but will not be shown 
 * when DEBUG is enabled and will not throw errors in IE 
 */

    if (WebCube.settings.DEBUG === "True") {
        try {  // Nice formatting for Firefox
            var arr = ['[DEBUG]:']; 
            var args = arr.concat(Array.prototype.slice.call(arguments));
            console.log.apply(this, args);
        }
        catch(err) { // not as nice, but workf for webkit browsers
            try {
                console.log(Array.prototype.slice.call(arguments));
            }
            catch(err){ // try logging with Microsoft Script Debugger
                try {
                    Debug.write(Array.prototype.slice.call(arguments));
                }
                catch(err){
                    // if all fails, don't do anything
                }
            }
        }
    }
};

WebCube.placeholderText = function() {
/* HTML5 Placeholder fix for Mozilla & IE */

    if ($.browser.mozilla || $.browser.msie) {
        $('input[placeholder]').each(function(k,v) {
            var placeholder = $(v).attr('placeholder');

            $(v).attr({'value': placeholder}).focus(function() {
                if ($(v).attr('value') == placeholder) $(this).val('');
            }).blur(function() {
                if($(v).attr('value') == '') $(v).val(placeholder);
            });
        });
    }
};

WebCube.formValidation = function() {
    var email_rx = /\b[A-Za-z0-9._%-+]+@[A-Za-z0-9._%-]+\.[A-Za-z0-9._%-]+\b/g;
    $('input').each(function(k,v) {
        if($(v).attr('name') && $(v).attr('name').indexOf('email') != -1) { 
            $(v).blur(function(e) { 
                if ($(v).val().match(email_rx)) {
                    $(v).parents('.row').removeClass('error').addClass('success');
                } else {
                    $(v).parents('.row').removeClass('success').addClass('error');
                }
            }); 
        } 
    });
};

WebCube.formErrorHandling = function() {
    
//    $('.error').each(function(k,v) {
//        $(v).find('input').addClass('error');
//    });
};

WebCube.adjustContainer = function(element, content_width) {
/* On main elements that have 100% width and background images, when the window 
 * is resized below the max width, the background image tiles to the end of the
 * window, not to the end of the content.  This gives the targeted elements
 * boundaries when below the content window width will allow the element to 
 * extend to the end of the content.
 */

    var cw = (!content_width) ? WebCube.settings.CONTENT_WIDTH : content_width;
    if ($(window).width() < cw) {
        $(element).css({'width': cw + 'px'});
    } else {
        $(element).css({'width':'100%'});
    }
};

WebCube.lookbook = function(container, o) { 

    var controls = $(container).parents('#content').find('.controls');

    $(container).attr({'data-total':$(container).children().length, 'data-current':0 });

    $(container).children().each(function(k,v) {
        $(this).attr({'data-id':k});
    });

    $('.controls .next, .controls .previous').live('click', function() {
        var dc = parseInt($(container).attr('data-current')),
            dt = parseInt($(container).attr('data-total'));

        switch($(this).attr('class')) {
            case 'next':
                dc = (dc < (dt-1)) ? dc+1 : 0;
                break;
            case 'previous':
                dc = (dc > 0) ? dc-1 : dt-1;
                break;
        }

        $(container).attr({'data-current':dc });
        $(container).animate({marginLeft:-dc*800}, 500);
        $('.page').removeClass('active');
        return false;
    }); 


    $('.controls .get_the_look, .controls .close').live('click', function() {
        var dc = $(container).attr('data-current');
        if (!$(container).find('.page[data-id="'+ dc +'"]').hasClass('active')) {
            $('.page').removeClass('active');
            $(container).find('.page[data-id="'+ dc +'"]').addClass('active');
            $('.get_the_look').addClass('hidden');
        } else {
            $('.page').removeClass('active');
        }
        return false; 
    }); 

    $('.page').hover(function() {
        if (!$('.page').hasClass('active')) {
            $(this).find('.get_the_look').removeClass('hidden'); 
        }
    }, function() {
        $(this).find('.get_the_look').addClass('hidden');
    });
        
};

WebCube.slider = function(container, options) { 

    /*
    ** Activates a slider.
    ** 
    */


    var element = $(container);
    var tweak = 0;
    if (typeof options !== 'undefined') { 
        tweak = options['tweak'];
    }

    if (typeof tweak === 'undefined') { 
        tweak = 0;
    }

    element.find('a.next').click(function() { 
        var move_element = element.find('.pagination_wrapper div').first();
        var selected_element = element.find('.pagination_wrapper div div.selected');
        var elements = element.find('.pagination_wrapper div div');
        var new_selection = null;
        var new_offset = null;
        var width = elements.first().width();
        
        if (selected_element.length === 0) { 
            selected_element = elements.first();
        }

        if (selected_element[0] === elements.last()[0]) { 
            new_selection = elements.first();
        } else { 
            new_selection = selected_element.next();
        }
        
        selected_element.removeClass('selected');
        new_selection.addClass('selected');
        
        new_offset = new_selection.position().left;
        move_element.animate({'margin-left': (-1 * new_selection.position().left) + tweak}, 150); 

        return false;
    });

    element.find('a.previous').click(function() { 
        var move_element = element.find('.pagination_wrapper div').first();
        var selected_element = element.find('.pagination_wrapper div div.selected');
        var elements = element.find('.pagination_wrapper div div');
        var new_selection = null;
        var new_offset = null;
        var width = elements.first().width();
        
        if (selected_element.length === 0) { 
            selected_element = elements.first();
        }

        if (selected_element[0] === elements.first()[0]) { 
            new_selection = elements.last();
        } else { 
            new_selection = selected_element.prev();
        }
        
        selected_element.removeClass('selected');
        new_selection.addClass('selected');
        
        new_offset = new_selection.position().left;
        move_element.animate({'margin-left': (-1 * new_selection.position().left) + tweak}, 150); 

        return false;
 
    });

};

WebCube.gallery = function(container, options) {
    /*
        shown, margin_right, scroll_type
        container: wrapper containing .display, .thumbnails ul 
    */

    var default_control_html = ['<p class="controls">',
                '<a href="#" class="prev disabled"><span>&laquo; Previous</span></a>',
                '<a href="#" class="next"><span>Next &raquo;</span></a>',
                '</p>'];
    var defaults = {
        show: 4,
        scroll_type: "pane",
        direction: "horizontal",
        marginTop: 0,
        marginRight: 0,
        marginBottom: 0,
        marginTop: 0,
        offset: 0,
        control_html: default_control_html.join('')
    };

    var settings = $.extend({}, defaults, options);

    this.scroller(container + ' .thumbnails', { 
        show: settings.show, 
        marginTop: settings.marginTop,
        marginRight: settings.marginRight,
        marginBottom: settings.marginBottom,
        marginLeft: settings.marginLeft,
        scroll_type: settings.scroll_type,
        direction: settings.direction,
        offset: 0,
        control_html: settings.control_html
    });

    $(container + ' .thumbnails ul li a').click(function() {
        if(!$(this).parent().hasClass('video')) {
            $(container + ' .display img').attr({'src' : $(this).attr('href')});
            $(container + ' .display a, ' + container + ' #view_larger a').attr({'href': $(this).attr('data-full-size')});
            if ($(container + ' .display a').hasClass('cloud-zoom')) {
                // remove cloudzoom instance info
                $('.mousetrap').remove();
                // reactivate cloudzoom
                $('.cloud-zoom').CloudZoom();
            }

            $(this).parents('ul').find('li').removeClass('active');
            $(this).parent().addClass('active');
        }
        return false;
    });

}; // eo gallery()

WebCube.scroller = function(container, options, callback, updateCallback) {
    /* 
        container: wrapper containing ul to scroll
        shown: number visible at any given time
        marginRight: default:0
        #TODO:
            - ADD # TO SCROLL BY
        
    */
    var default_control_html = ['<p class="controls">',
            '<a href="#" class="prev disabled"><span>&laquo; Previous</span></a>',
            '<a href="#" class="next"><span>Next &raquo;</span></a>',
            '</p>'
        ];

    var defaults = {
        show: 4,
        marginTop: 0,
        marginRight: 0,
        marginBottom: 0,
        marginTop: 0,
        scroll_type: "pane",
        tag_type: { "parent" : " ul", "children" : " ul li" },
        offset: 0,
        direction: "horizontal",
        control_html: default_control_html.join('')
    };

    var stop_point = 0;
    // defaults + options = settings
    var settings = $.extend({}, defaults, options);


    if (settings.scroll_type === 'lookbook') {
        settings['tag_type'] = { "parent" : " .row", "children" : " .row .column" };
    }


    settings['thumbs'] = {
        width: $(container + settings.tag_type.children).width(),
        height: $(container + settings.tag_type.children).height(),
        holder_width: $(container + settings.tag_type.children).width()*settings.show + ((settings.show*(settings.marginRight))),
        holder_height: $(container + settings.tag_type.children).height()*settings.show + ((settings.show*(settings.marginBottom))),
        len: $(container + settings.tag_type.children).length
    };

    $(container).attr({
        'data-current' : 0, 
        'data-total': ((settings.thumbs.len%settings.show) !== 0) ? Math.floor(settings.thumbs.len/settings.show) : Math.floor(settings.thumbs.len/settings.show)-1,
        'data-count': settings.thumbs.len,
        'data-offset': ((settings.thumbs.len%settings.show) !== 0) ? settings.show-(settings.thumbs.len%settings.show) : 0,
        'data-show': settings.show
    });

    $(container + settings.tag_type.children).css({ 
        marginTop: settings.marginTop,
        marginRight: settings.marginRight
    });

    // Add IDs
    $(container + settings.tag_type.children).each(function(k,v) {
        $(v).attr({'data-id':k, 'data-info':k});

        if (!(k%settings.show)) {
            if (stop_point == parseInt($(container).attr('data-total'))) { 
                var last_stop = k-parseInt($(container).attr('data-offset'));
                $(container + settings.tag_type.children + ':eq('+ last_stop +')').attr({'data-stop':stop_point});
            } else {
                $(v).attr({'data-stop':stop_point});
            }
            stop_point++;
        }
    });


    // Add controls if needed
    if (settings.thumbs.len > settings.show) {
        $(container + settings.tag_type.parent).wrap('<div class="scroller_wrap" />');
        $(container).append(settings.control_html);
       
        if (settings.scroll_type === 'lookbook' || settings.scroll_type === 'seamless') {
            $(container + settings.tag_type.children + '[data-id="'+ (settings.thumbs.len-1) + '"]').clone().prependTo(container + settings.tag_type.parent).attr({'data-id':'-1'});
            $(container + settings.tag_type.children + '[data-id="'+ (settings.thumbs.len-2) + '"]').clone().prependTo(container + settings.tag_type.parent).attr({'data-id':'-2'});

            $(container + settings.tag_type.children + '[data-id="0"]').clone().appendTo(container + settings.tag_type.parent).attr({'data-id':(settings.thumbs.len)});
            $(container + settings.tag_type.children + '[data-id="1"]').clone().appendTo(container + settings.tag_type.parent).attr({'data-id':(settings.thumbs.len+1)});
            $(container + settings.tag_type.parent).css({ marginLeft : -settings.thumbs.width*settings.offset});

            $(container + ' .controls a.prev').removeClass('disabled');
        }

        $(container + settings.tag_type.children + '[data-id="0"]').addClass('active');

        $(container + ' .controls a').click(function() {
            if (!$(this).hasClass('disabled')) {
                direction($(this).attr('class'));
            }
            return false;
        });
    }
    if (callback && typeof(callback) === 'function') {
        callback();
    }

    
    function direction(el) {
        var current = parseInt($(container).attr('data-current'));
        switch(el) {
            case 'prev':
                current--;
                break;
            default:
                current++;
        }

        $(container).attr({'data-current':current});
        $(container + ' .controls a').removeClass('disabled');

        $(container + settings.tag_type.children).removeClass('active');  
        $(container + settings.tag_type.children + '[data-id="'+ current +'"]').addClass('active');
    
        if (current == parseInt($(container).attr('data-total'))+1) {
            $(container + settings.tag_type.children + '[data-info="0"]').addClass('active');
        } else if (current == -1) {
            $(container + settings.tag_type.children + '[data-info="'+ (settings.thumbs.len-1) +'"]').addClass('active');
        }

        // TODO: clean this up
        if (settings.scroll_type === 'lookbook') {
            var updated_position = ((-settings.thumbs.width*current)-((settings.marginRight)*current))-(settings.thumbs.width*settings.offset);
           
            $(container + settings.tag_type.parent).animate({ marginLeft : updated_position }, WebCube.settings.TRANS_SPEED, function() {
                if (current == parseInt($(container).attr('data-total'))+1) {
                    $(container).attr({'data-current':0});
                    $(this).css({marginLeft: -settings.thumbs.width*settings.offset});
                } else if( current == -1) {
                    $(container).attr({'data-current':settings.thumbs.len-1});
                    $(this).css({marginLeft: (-settings.thumbs.width*settings.offset)-(settings.thumbs.width*(settings.thumbs.len-1))});
                }
            });

        } else {

            var current_stop = $(container + settings.tag_type.children + '[data-stop="'+ current +'"]');

            if (current == parseInt($(container).attr('data-total'))) {
                $(container + ' .controls a.next').addClass('disabled');
            } else if (current === 0) {
                $(container + ' .controls a.prev').addClass('disabled');
            }

            if (settings.direction === 'vertical') {
                $(container + settings.tag_type.parent).animate({ marginTop : -current_stop.position().top }, WebCube.settings.TRANS_SPEED);
            } else {
                $(container + settings.tag_type.parent).animate({ marginLeft : -current_stop.position().left }, WebCube.settings.TRANS_SPEED);
            }
            
            if (updateCallback && typeof(updateCallback) === 'function') {
                updateCallback();
            }
        }
    }

}; // eo scroller()


WebCube.initCTAs = function(options) {

    var cta_options = $.extend({
        selector:'.cta:not(.exclude)',
        //controls: 'wc_user_controls',
        pager: false, 
        halt_on_click: false,
        post_init: null, // function ($cta, options) {}
        transition: null, // function ($cta, prevImageIndex, curImageIndex, options) {}
        speed: WebCube.settings.TRANS_SPEED
    }, options || {});

    $(cta_options['selector']).data('options', cta_options).each(function(){

        var $cta = $(this);
        $cta.data('total_images', $cta.find('.cta_item').length);
        $cta.data('cur_image', 0);
        $cta.data('prev_image', $cta.data('total_images')-1);

        // main initialization function
        function init() {
            $(window).load(function(){
                var options = $cta.data('options');

                // adjust CTA dimension
                var w=$cta.data('width'),
                    h=$cta.data('height');

                if (h == '100%'){
                    h = $cta.parent().height();
                }
                if (w == '100%'){
                    w = $cta.parent().width();
                }

                $cta.css({'width':w, 'height':h});

                initTransition();
                initPager();

                if (options['post_init']){ success = options['post_init']($cta, options); }
                WebCube.adjustContainer('#wrap, #footer');
                $('.cta').css('visibility', 'visible');
            });
        }

        // starts the slideshow
        function initTransition() {

            var delay=parseFloat($cta.data('delay'));

            // if more than one image, rotate them
            if ($cta.data('total_images') > 1 && delay > 0) {
                var rotator = setInterval(function(){
                    var nextImage = ($cta.data('cur_image') < $cta.data('total_images')-1) ? $cta.data('cur_image')+ 1 : 0;
                    swapImage(nextImage);
                }, delay*1000);
                $cta.data('rotator', rotator);
            }
        }

        function initPager() {
            var options = $cta.data('options');
            if (options['pager']){

                var pager_sel = '.pager';
                var $pager;

                if ($cta.find(pager_sel).length > 0) {
                    $pager = $cta.find(pager_sel);
                }
                else {
                    var $controls;
                    if ($cta.find('.controls').length > 0) {
                        $controls = $cta.find('.controls');
                    }
                    else {
                        $cta.append('<p class="controls"></p>');
                        $controls = $cta.find('.controls');
                    }

                    var pager_html = "<ul class=\"pager\" style=\"z-index: "+($cta.data('total_images')+1)+"\">";
                    $cta.find('.cta_item').each(function(k, v){
                        pager_html += '<li data-item="'+k+'"';
                        if (k == 0) { pager_html += 'class="active" ' }
                        pager_html += '><a href="#"><span>'+(k+1)+'</span></a></li>';
                    });
                    $controls.append(pager_html);
                    $pager = $controls.find('.pager');
                }

                $pager.find('li a').click(function() {
                    clearInterval($cta.data('rotator'));
                    if (options['halt_on_click'] == false) {
                        initTransition();
                    }
                    else {
                        $cta.data('rotator', null);
                    }

                    swapImage($(this).parent('li').data('item'));
                    return false;
                });

            }
        }

        // utility function to get the z-index of a cta_item
        function getZIndex($cta_item){
            return parseInt($cta_item.css('z-index'));
        }

        function swapImage(newImage) {
            var options = $cta.data('options');
            var prevImage = $cta.data('cur_image');
            var success=false;

            if (newImage == prevImage) { return }

            if (options['transition']){ 
                success = options['transition']($cta, prevImage, newImage, options);
            }
            else { // default swapImage transition
                try {
                    // we first push everything in front of the new image back one level 
                    $cta.find('.cta_item').each(function(){
                        if (getZIndex($(this)) > getZIndex($cta.find('.cta_item').eq(newImage))) {
                            $(this).css('z-index', getZIndex($(this))-1);
                        }
                    });
                    // now hide the new image and move it to the front
                    $cta.find('.cta_item').eq(newImage).hide()
                        .css('z-index', $cta.data('total_images'))
                        .fadeIn(options['speed'], function (){
                        });
                    success = true;
                }
                catch(e){ success = false }

            } // eo default swapImage transition
            if (success) {
                $cta.data('cur_image', newImage);
                $pager = $cta.find('.pager');
                $pager.find('li').removeClass('active');
                $pager.find('li').eq(newImage).addClass('active');
            }
        } // eo swapImage()

        init();

    }); // eo $(cta_options['selector']).each()
}; // eo WebCube.initCTAs()

WebCube.overlay = function(data, options, callback) {

    var overlay_options = $.extend({
        "class": '', // class throws error without quotes
        "id": '',
        "width": null,
        "height": null
    }, options || {});

    /* Basic Overlay */
    $('.overlay_wrap').remove();
    var html = WebCube.template(
        '<div class="overlay_wrap{{ 0 }}"><div class="overlay_bg" /><div {{ 1 }} class="overlay"><a class="close"><span>X</span></a></div></div>', 
        (overlay_options['class'] ?' '+overlay_options['class']:''),
        (overlay_options.id ? 'id="'+ overlay_options.id +'"' : '')
    );

    $('body').append(html);
    
    if ($.browser.msie && $.browser.version < 9) {
        $('.overlay').hide();
    } else {
        $('.overlay').css('opacity',0);
    }

    $('.overlay').append(data);
    WebCube.loader('add', '.overlay_bg');

    var imgCount = 0;
    $('.overlay').attr({'data-loaded': imgCount, 'data-imgs':$('.overlay img').length});

    if ($('.overlay img').length) {
        imgCount++;
        $('.overlay img').each(function(k,v) {
            //$(v).attr({'data-loaded':'false'}).one('load', function() {
             $(v).one('load', function() {
                //$(v).attr({'data-loaded':'true'});
                $('.overlay').attr({'data-loaded': imgCount++ });

                if ($('.overlay').attr('data-loaded') == $('.overlay').attr('data-imgs')) {

                    if (typeof callback === 'function') {
                        callback();
                    }

                    position_content();
                    if ($.browser.msie && $.browser.version < 9) {
                        $('.overlay').show();
                        WebCube.loader('remove', '.overlay_bg');
                    } else {
                        $('.overlay').animate({'opacity':1}, WebCube.settings.TRANS_SPEED, function() {
                            WebCube.loader('remove', '.overlay_bg');
                        })
                    }
                }
            });
            if (this.complete) $(v).trigger('load');
        });
    } else {
        if (typeof callback === 'function') {
            callback();
        }

        position_content();
        $('.overlay').css('opacity', 1);
        WebCube.loader('remove', '.overlay_bg');
    }

    function position_content() {

        $('.overlay_wrap, .overlay_bg').css({
            'width':$(window).width(), 
            'height':$(window).height()
        });

        if (overlay_options.width) { $('.overlay').css('width',overlay_options.width) }
        if (overlay_options.height) { $('.overlay').css('height',overlay_options.height) }

        var padT = $('.overlay').css('paddingTop').replace('px',''),
            padL = $('.overlay').css('paddingLeft').replace('px','');

        $('.overlay').css({
            marginLeft:($(window).width()*.5)-($('.overlay').width()*.5)-padL,
            marginTop:($(window).height()*.5)-($('.overlay').height()*.5)-padT
        });

        if ($('html').hasClass('ie6')){
            $('.overlay_wrap, .overlay_bg').css({
                height: $(document).height()+'px'
            });
            $('.overlay').css({
                marginLeft:($(window).width()*.5)-($('.overlay').width()*.5)-padL+$(document).scrollLeft(),
                marginTop:($(window).height()*.5)-($('.overlay').height()*.5)-padT+$(document).scrollTop()
            });
        }
    }

    position_content(overlay_options);
    addEvents();

    function addEvents(){
        $(window).bind('resize', position_content);
        if ($('html').hasClass('ie6')){ $(window).bind('scroll', position_content); }
    }

    function removeEvents(){
        $(window).unbind('resize',position_content);
        if ($('html').hasClass('ie6')){ $(window).unbind('scroll', position_content); }
    }
    
    $('.overlay_bg, .overlay .close').live('click', function() {
        $('.overlay_wrap').remove();
        WebCube.loader('remove', '.overlay_bg');
        removeEvents();

        return false;
    });
};

WebCube.videoOverlay = function(link, options) {
    /* helper: pass just a link and video options */
    WebCube.overlay('', options, function() {
        WebCube.embedVideo('.overlay', link, options);
        $('.overlay').append('<a class="close"><span>X</span></a>');
    });

}


WebCube.loader = function(method, selector, options) {
    var defaults = {
        image: WebCube.settings.path,
        width: WebCube.settings.loader.width,
        height: WebCube.settings.loader.height,
        frames: 20,
        timer: 50
    },
    settings = $.extend({}, defaults, options);
            
    var methods = {
        add : function() {
            clearInterval(loadingInt);
            $(selector).addClass('content_loading').prepend('<div class="loader" />');
            loadingInt = setInterval(function() {
                loadingTimer++;
                $(selector + ' .loader').css({'background-position':'0 -'+ (settings.height*(loadingTimer-1)) +'px'});
                if (loadingTimer == settings.frames) loadingTimer = 0;
            }, settings.timer);
        },
        remove : function() {
            clearInterval(loadingInt);
            $(selector + ' .loader').remove();
            $(selector).removeClass('content_loading');
        }
    };

    if (methods[method]) return methods[method].apply();
};

WebCube.embedVideo = function(selector, link, options, callback) {

    // check for all
    $(selector).each(function(k,v) {
        
        // reset link if more than one, 
        // likely to be used on page load for multiple videos
        if (k > 0) link = null;

        var video_embed = { 'type':'webcube', 'id': link }, 
            rx = {
                'youtube': /(\S*)youtu(.be\/|be.com\/(watch\?v=|v\/))/g,
                'vimeo': /(\S*)vimeo.com(\/video\/|\/)/g
            },

            defaults = {
                width:560,
                height:315,
                extra_params: ''            
            },
            settings = $.extend({}, defaults, options);

        // if there is no link, check for a url
        if (!link) {
            link = ($(v).attr('data-webcube-video')) ? $(v).attr('data-webcube-video') : null;
            // if there is still no url, log the error
            if (!link) {
                WebCube.log('Cannot find a url');
                return;
            }
        }

        if($(v).data('nonembed') !== undefined || settings.webcube_iframe === false ) {
            if (link.match(rx.youtube)) {
                //pass
            } else if (link.match(rx.vimeo)) {
                //pass
            } else {
                var video_url = ($(v).data('webcube-video') === undefined) ? settings.video_url : $(v).data('webcube-video'),
                    video_html = [],
                    ua = navigator.userAgent;

                if (ua.indexOf('Firefox') !== -1 || ua.indexOf('MSIE') !== -1) {
                    video_html.push('<object data="', WebCube.settings.STATIC_URL, 'videos/flash/Web_Cube_VideoPlayer.swf" type="application/x-shockwave-flash" width="', settings.width, '" height="', settings.height, '">',
                        '<param name="bgcolor" value="#0b6dd2">',
                        '<param name="allowFullScreen" value="true">',
                        '<param name="scale" value="noscale">',
                        '<param name="wmode" value="transparent">',
                        '<param name="quality" value="high">',
                        '<param name="menu" value="false">',
                        '<param name="allowScriptAccess" value="always">',
                        '<param name="flashvars" value="videoPath=', link, '&amp;baseurl=', window.location.origin, '&amp;accentcolor=606060&amp;emailurl=javascript:WebCube.sendToFriend()">',
                        '<param name="movie" value="', WebCube.settings.STATIC_URL, 'videos/flash/Web_Cube_VideoPlayer.swf">',
                    '</object>');
                } else {
                    video_html.push('<video width="', settings.width, '" height="', settings.height, '" poster="', $(v).data('thumbnail'), '" controls>',
                        '<source src="', link, '" />',
                    '</video>');
                }
                $(v).append(video_html.join(''));
                return;
            }
        }
       
        if (link.match(rx.youtube)) {
            video_embed = { 'type': 'youtube', 'id': link.split(link.match(rx.youtube))[1] };
        }
        if (link.match(rx.vimeo)) {
            video_embed = { 'type': 'vimeo', 'id': link.split(link.match(rx.vimeo))[1] };
        }

        var embed_template = {
            'youtube': WebCube.template('<iframe width="{{ 0 }}" height="{{ 1 }}"'
                + 'src="http://www.youtube.com/embed/{{ 2 }}?wmode=opaque{{ 3 }}" frameborder="0" allowfullscreen></iframe>', 
                settings.width, settings.height, video_embed.id, settings.extra_params),
            'vimeo': WebCube.template('<iframe width="{{ 0 }}" height="{{ 1 }}"'
                + 'src="http://player.vimeo.com/video/{{ 2 }}?{{ 3 }}" frameborder="0" webkitAllowFullScreen allowFullScreen></iframe>',
                settings.width, settings.height, video_embed.id, settings.extra_params),
            'webcube': WebCube.template('<iframe width="{{ 0 }}" height="{{ 1 }}" src="{{ 2 }}?{{ 3 }}" frameborder="0"></iframe>',
                settings.width, settings.height, video_embed.id, settings.extra_params)
        };

        $(v).html(embed_template[video_embed.type]);
    
    }); // eo each

    if (callback && typeof(callback) === 'function') {
        callback();
    }

}


WebCube.postComment = function(form, options, callback) {
    /* TODO: Make More generic */

    var defaults = {
        comment_count : false,
        recaptcha_options: {}
    },
    settings = $.extend({}, defaults, options);
    
    function init_captcha() {
        if (WebCube.settings.RECAPTCHA_PUB_KEY && $('#recaptcha_div').length && !$('#recaptcha_div').children().length) {
            var recaptcha_defaults = {
                theme: "clean",
                callback: Recaptcha.focus_response_field
            }
            var recaptcha_settings = $.extend({}, recaptcha_defaults, settings.recaptcha_options);
            Recaptcha.create(WebCube.settings.RECAPTCHA_PUB_KEY, "recaptcha_div", recaptcha_settings);
        }
    }
    
    init_captcha()

    $(form).live('submit',function() {
        var $this = $(this),
            form_info = {};

        if (settings.comment_count) {
            var comment_count = parseInt(settings.comment_count);
        }

        $this.find(':input:not(:hidden, [name="submit"], [name="email"])').each(function(k,v) {
            form_info[$(v).attr('name')] = $(v).val();
        });

        $.post($(this).attr('action'), $(this).serialize(), function(data) {
            $this.parent().html(data);
            init_captcha()
            if ($('.reply form').attr('data-posted') !== 'false') {
                if (settings.comment_count) {
                    comment_count++;
                    $('.comments .comment_count, .entry .footer .comment_count span').text(comment_count);
                }
                $('.comments').append(WebCube.template('<div class="comment new"><h4>{{ 0 }} says:</h4><p class="date">Just Now!</p><div class="body"><p>{{ 1 }}</p></div></div>', form_info.name, form_info.comment));
                $('.comments .comment.new').slideDown(WebCube.settings.TRANS_SPEED);
            }
        });
        return false;
    });

}

WebCube.sendToFriend = function(url) {
    // url: /send-to-friend/send-to-friend/?url=url 
    if (url) {
        $.get(url, function(data) {
            WebCube.overlay(data, {'id': 'send_to_friend_overlay'});
     
            $('#form_send_to_friend').live('submit', function() {
                $.post($(this).attr('action'), $(this).serialize(), function(data) {
                    $('#send_to_friend_overlay .holder').html(data);
                });
                return false;
            });
        });
    } else {
        WebCube.log('URL to share is not defined');
    }
};

/* bundle into utility method? */
WebCube.sortArray = function(arr) {
    arr.sort(function(a,b) { return a-b })
    return arr;
}

WebCube.getMaxInArray = function(arr) {
    return Math.max.apply(null, arr);
};

WebCube.getMinInArray = function(arr) {
    return Math.min.apply(null, arr);
};

WebCube.template = function(str) {
    for (var i = 1; i < arguments.length; i++) {
        str = str.replace('{{ ' + (i - 1) + ' }}', arguments[i]);
    }
    return str;
}